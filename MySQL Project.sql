SELECT *
FROM sales_data_sample;

#CREATING A STAGING TABLE

CREATE TABLE sales_staging
LIKE sales_data_sample;

SELECT *
FROM sales_staging;

INSERT sales_staging
SELECT *
FROM sales_data_sample;

#Checking Dupicates

SELECT *,
ROW_NUMBER() OVER(PARTITION BY ORDERNUMBER, QUANTITYORDERED, PRICEEACH, SALES, PRODUCTLINE, PRODUCTCODE, ORDERDATE, CONTACTFIRSTNAME, CONTACTLASTNAME, DEALSIZE) AS ROWNUMBER
FROM sales_staging;

WITH duplicate_cte AS
(
SELECT *,
ROW_NUMBER() OVER(PARTITION BY ORDERNUMBER, QUANTITYORDERED, PRICEEACH, SALES, PRODUCTLINE, PRODUCTCODE, ORDERDATE, CONTACTFIRSTNAME, CONTACTLASTNAME, DEALSIZE) AS ROWNUMBER
FROM sales_staging
)
SELECT *
FROM duplicate_cte
WHERE ROWNUMBER > 1;

SELECT *
FROM sales_staging
WHERE CONTACTLASTNAME = 'Young' AND ORDERNUMBER = 10100 ;

# Removing duplicates

CREATE TABLE sales_staging2
LIKE sales_staging;

SELECT *
FROM sales_staging2;

ALTER TABLE sales_staging2 ADD ROWNUMBER INT;

INSERT INTO sales_staging2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY ORDERNUMBER, QUANTITYORDERED, PRICEEACH, SALES, PRODUCTLINE, PRODUCTCODE, ORDERDATE, CONTACTFIRSTNAME, CONTACTLASTNAME, DEALSIZE) AS ROWNUMBER
FROM sales_staging;

SELECT *
FROM sales_staging2
WHERE ROWNUMBER > 1;

DELETE FROM sales_data.sales_staging2
WHERE ROWNUMBER > 1;

SELECT *
FROM sales_staging2;

#Standadizing data

SELECT DISTINCT CITY
FROM sales_staging2
ORDER BY 1;

SELECT DISTINCT CUSTOMERNAME
FROM sales_staging2
ORDER BY 1;

 SELECT ORDERDATE,
 STR_TO_DATE (ORDERDATE, '%m/%d/%Y')
 FROM sales_staging2;
 
 UPDATE sales_staging2
 SET ORDERDATE = STR_TO_DATE (ORDERDATE, '%m/%d/%Y');
 
UPDATE sales_staging2  
SET ORDERDATE = DATE(ORDERDATE);
 
SELECT ORDERDATE
FROM sales_staging2; 

SELECT *
FROM sales_staging2
WHERE PRICEEACH IS NULL
AND QUANTITYORDERED IS NULL;


SELECT *
FROM sales_staging2
WHERE SALES IS NULL
OR SALES = '';

SELECT DISTINCT COUNTRY
FROM sales_staging2;

SELECT DISTINCT PRICEEACH
FROM sales_staging2
ORDER BY 

#EXPLORATORY DATA ANALYSIS

SELECT *
FROM sales_staging2;

SELECT MAX(SALES), MAX(QUANTITYORDERED)
FROM sales_staging2;

SELECT ORDERDATE, COUNTRY, CITY, SALES
FROM sales_staging2
WHERE COUNTRY = 'USA'
ORDER BY ORDERDATE DESC;

SELECT COUNTRY, SUM(SALES)
FROM sales_staging2
GROUP BY COUNTRY
ORDER BY 2 DESC;

SELECT PRODUCTLINE, SUM(SALES)
FROM sales_staging2
GROUP BY PRODUCTLINE
ORDER BY 2 DESC;


SELECT MIN(ORDERDATE), MAX(ORDERDATE)
FROM sales_staging2;

SELECT YEAR(ORDERDATE), SUM(SALES)
FROM sales_staging2
GROUP BY YEAR(ORDERDATE)
ORDER BY 1 DESC;

SELECT CITY, SUM(QUANTITYORDERED), SUM(SALES)
FROM sales_staging2
GROUP BY CITY
ORDER BY 1 DESC;

SELECT SUBSTRING(ORDERDATE,1,7) AS MONTH, SUM(QUANTITYORDERED)
FROM sales_staging2
GROUP BY MONTH
ORDER BY 1 ASC;

#CALCULATING ROLLING TOTALS

WITH ROLLING_TOTAL AS 
(
SELECT SUBSTRING(ORDERDATE,1,7) AS MONTH, SUM(SALES) AS TOTAL_SALES
FROM sales_staging2
GROUP BY MONTH
ORDER BY 1 ASC
)
SELECT MONTH, TOTAL_SALES, SUM(TOTAL_SALES) OVER(ORDER BY MONTH) AS ROLLINGTOTAL
FROM ROLLING_TOTAL;

SELECT ORDERDATE, CUSTOMERNAME, CITY, DEALSIZE
FROM sales_staging2
WHERE DEALSIZE = 'LARGE';

SELECT CUSTOMERNAME, COUNTRY, CITY, COUNT(DEALSIZE) AS LARGE_ORDERS
FROM sales_staging2
WHERE DEALSIZE = 'LARGE'
GROUP BY CUSTOMERNAME, COUNTRY, CITY
ORDER BY LARGE_ORDERS DESC;

SELECT CUSTOMERNAME, COUNTRY, CITY, COUNT(QUANTITYORDERED) AS ORDERS
FROM sales_staging2
GROUP BY CUSTOMERNAME, COUNTRY, CITY
ORDER BY ORDERS DESC;

WITH BEST_CUSTOMERS (CUSTOMERNAME, YEARS, TOTAL_SALES) AS
(
SELECT CUSTOMERNAME, YEAR(ORDERDATE), SUM(SALES)
FROM sales_staging2
GROUP BY CUSTOMERNAME, YEAR(ORDERDATE)
), CUSTOMER_RANK AS
(
SELECT *, 
DENSE_RANK() OVER(PARTITION BY YEARS ORDER BY TOTAL_SALES DESC) AS RANKING
FROM BEST_CUSTOMERS
WHERE YEARS IS NOT NULL
ORDER BY RANKING ASC
)
SELECT *
FROM CUSTOMER_RANK
WHERE RANKING <= 5
ORDER BY 2 ASC; 




SELECT *
FROM sales_staging2;




